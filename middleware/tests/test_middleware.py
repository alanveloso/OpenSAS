#!/usr/bin/env python3
"""
Script de teste para o middleware SASSharedRegistry
"""

import os
import sys
import asyncio

# Adicionar o diret√≥rio atual ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Testa se todos os m√≥dulos podem ser importados"""
    print("üß™ Testando imports...")
    
    try:
        from src.config.settings import settings
        print("‚úÖ Config importado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao importar config: {e}")
        return False
    
    try:
        from src.blockchain.blockchain import Blockchain
        print("‚úÖ Blockchain importado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao importar blockchain: {e}")
        return False
    
    try:
        from src.handlers.handlers import EVENT_HANDLERS
        print("‚úÖ Handlers importado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao importar handlers: {e}")
        return False
    
    try:
        from src.repository.repository import CBSDRepository
        print("‚úÖ Repository importado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao importar repository: {e}")
        return False
    
    return True

def test_config():
    """Testa se as configura√ß√µes est√£o definidas"""
    print("\nüîß Testando configura√ß√µes...")
    
    try:
        from src.config.settings import settings
        
        # Verificar se as vari√°veis de ambiente est√£o definidas
        required_vars = ['RPC_URL', 'CONTRACT_ADDRESS', 'OWNER_PRIVATE_KEY', 'CHAIN_ID']
        
        for var in required_vars:
            if hasattr(settings, var):
                value = getattr(settings, var)
                if value:
                    print(f"‚úÖ {var}: {str(value)[:20]}...")
                else:
                    print(f"‚ö†Ô∏è  {var}: vazio")
            else:
                print(f"‚ùå {var}: n√£o encontrado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar configura√ß√µes: {e}")
        return False

def test_abi():
    """Testa se o ABI est√° presente"""
    print("\nüìÑ Testando ABI...")
    
    abi_path = os.path.join(os.path.dirname(__file__), 'abi', 'SASSharedRegistry.json')
    
    if os.path.exists(abi_path):
        print(f"‚úÖ ABI encontrado em: {abi_path}")
        
        try:
            import json
            with open(abi_path, 'r') as f:
                abi = json.load(f)
            print(f"‚úÖ ABI carregado com sucesso ({len(abi)} itens)")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao carregar ABI: {e}")
            return False
    else:
        print(f"‚ùå ABI n√£o encontrado em: {abi_path}")
        return False

async def test_blockchain_connection():
    """Testa conex√£o com a blockchain (sem enviar transa√ß√µes)"""
    print("\nüîó Testando conex√£o com blockchain...")
    
    try:
        from src.blockchain.blockchain import Blockchain
        
        # Tentar criar inst√¢ncia (vai falhar se n√£o conseguir conectar)
        bc = Blockchain()
        print("‚úÖ Inst√¢ncia Blockchain criada com sucesso")
        
        # Testar algumas fun√ß√µes b√°sicas
        try:
            latest_block = bc.get_latest_block()
            print(f"‚úÖ √öltimo bloco: {latest_block}")
        except Exception as e:
            print(f"‚ö†Ô∏è  N√£o foi poss√≠vel obter √∫ltimo bloco: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao conectar com blockchain: {e}")
        print("üí° Certifique-se de que o Besu est√° rodando e as configura√ß√µes est√£o corretas")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ Iniciando testes do middleware SASSharedRegistry\n")
    
    # Teste 1: Imports
    if not test_imports():
        print("\n‚ùå Teste de imports falhou")
        return False
    
    # Teste 2: Configura√ß√µes
    if not test_config():
        print("\n‚ùå Teste de configura√ß√µes falhou")
        return False
    
    # Teste 3: ABI
    if not test_abi():
        print("\n‚ùå Teste de ABI falhou")
        return False
    
    # Teste 4: Conex√£o com blockchain
    try:
        asyncio.run(test_blockchain_connection())
    except Exception as e:
        print(f"‚ùå Teste de conex√£o falhou: {e}")
    
    print("\n‚úÖ Testes b√°sicos conclu√≠dos!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Configure o arquivo .env com valores reais")
    print("2. Certifique-se de que o Besu est√° rodando")
    print("3. Execute: python main.py")
    
    return True

if __name__ == "__main__":
    main() 